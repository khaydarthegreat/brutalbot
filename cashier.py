import uuid
import database
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputTextMessageContent, InlineQueryResultArticle
from telegram.ext import CallbackContext, CallbackQueryHandler, InlineQueryHandler, MessageHandler, Filters
import config

# Logging setup
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def invoice(update: Update, context: CallbackContext) -> None:
    user_id = update.inline_query.from_user.id
    if user_id not in config.SALES_MANAGERS:
        # This user is not allowed to issue invoices
        logging.info(f"User {user_id} tried to issue an invoice but is not in the list of sales managers.")
        return

    query = update.inline_query.query.split()

    # Log the received query
    logger.info(f'Received inline query: {query}')

    # Ignore empty queries or queries without amount
    if not query or not query[0].isdigit():
        return

    amount = int(query[0])

    products = ['Vip', 'Express', 'Ordinar', 'Combo', 'Lesenka']

    results = []

    for product in products:
        # Log the extracted amount and product
        logger.info(f'Creating invoice for amount: {amount}, product: {product}')

        pay_url = f"{config.BOT_URL}?start=amount_{amount}_product_{product}"

        results.append(InlineQueryResultArticle(
            id=str(uuid.uuid4()),  # Generate a random ID for this result
            title=f"–°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç ‚Ä¢ {amount} —Ä—É–±–ª–µ–π",
            description=f"–ü—Ä–æ–¥—É–∫—Ç: {product}",  
            input_message_content=InputTextMessageContent(f"""üßæ –ù–æ–≤—ã–π —Å—á–µ—Ç –Ω–∞ —Å—É–º–º—É {amount} —Ä—É–±–ª–µ–π.
        
–î–ª—è –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É. üëá """),
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=pay_url)]
            ]),
            thumb_url="https://cdn-icons-png.flaticon.com/512/1117/1117142.png",  # Replace this with your actual image URL
        ))

    context.bot.answer_inline_query(update.inline_query.id, results, cache_time=0)

def handle_payment(update: Update, context: CallbackContext) -> None:
    query = update.callback_query

    # extract the invoice id from context.chat_data
    invoice_id = context.chat_data.get('invoice_id')

    # Check the invoice status in the database
    invoice_status = database.get_invoice_status(invoice_id)

    if invoice_status == 'PAID' or invoice_status == 'DECLINED':
        # This invoice has already been paid, return a message to the user
        query.edit_message_text(text="–≠—Ç–æ—Ç —Å—á–µ—Ç –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")
    else:
        # The invoice is not paid, proceed with the payment process
        query.edit_message_text(text="""üìéüßæ –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞.
        """,
                                reply_markup=InlineKeyboardMarkup([
                                    [InlineKeyboardButton("üîô –ö —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º", callback_data='go_back')]
                                ]))


def go_back(update: Update, context: CallbackContext) -> None:
    query = update.callback_query

    # Retrieve the amount and card number from the context attributes
    amount = context.chat_data.get('amount')
    card_number, bank = database.get_current_card_and_bank()
    
    query.edit_message_text(text=f"""
üßæ –°—á–µ—Ç –Ω–∞ —Å—É–º–º—É {amount} —Ä—É–±–ª–µ–π.  

–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É –±–∞–Ω–∫–∞ –†–§

–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:
{bank} {card_number}

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª" 

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É üë®üèª‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä. """,
                            reply_markup=InlineKeyboardMarkup([
                                [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data='i_paid'),
                                 InlineKeyboardButton("üë®üèª‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä", url='https://t.me/stavki_tochka1')]
                            ]))




def handle_screenshot(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    name = user.first_name + " " + user.last_name if user.last_name else user.first_name
    username = user.username
    user_id = user.id
    document_file_id = None

    if update.message.photo:
        # Choose the highest quality photo
        document_file_id = update.message.photo[-1].file_id
    elif update.message.document:
        # Accept any document, regardless of its mime_type
        logger.info(f"Received document from user: id={user_id}, name={name}, username={username}")
        document_file_id = update.message.document.file_id

    if document_file_id is not None:
        
        logger.info(f"Received screenshot from user: id={user_id}, name={name}, username={username}")

        # Retrieve the latest invoice id for the user
        invoice_id = database.get_last_invoice_id_for_user(user_id)

        logger.info(f"Latest invoice id for user {user_id}: {invoice_id}")  # Log the fetched invoice id for debugging

        if invoice_id is not None:
            # Retrieve the invoice details from the database
            database.add_screenshot_id(invoice_id, update.message.message_id)
            invoice_details = database.get_invoice_details(invoice_id)
            invoice_amount = invoice_details["amount"]
            product = invoice_details["product"]

            for manager_id in config.SALES_MANAGERS:
                # Forward the screenshot to the payment manager
                context.bot.forward_message(chat_id=manager_id, from_chat_id=update.effective_chat.id, message_id=update.message.message_id)

                logger.info(f"Forwarded screenshot to payment manager: id={manager_id}")

                # Build the message string
                msg = f"""–ü–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã. 
                
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç.

"""
                msg += f"–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {name}\n"
                if username:
                    msg += f"Username –∫–ª–∏–µ–Ω—Ç–∞: {username}\n"
                msg += f"User ID –∫–ª–∏–µ–Ω—Ç–∞ : {user_id}\n"
                msg += f"–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞: {invoice_id}\n"
                msg += f"–°—É–º–º–∞ —Å—á–µ—Ç–∞: {invoice_amount}\n"
                if product != 'null':
                    msg += f"–ü—Ä–æ–¥—É–∫—Ç: {product}\n"

                msg += f"üí≥: {database.get_current_card_and_bank()}"

                # Send the invoice details to the payment manager
                context.bot.send_message(
                    chat_id=manager_id,
                    text=msg,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f'approve_{invoice_id}'),
                        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'decline_{invoice_id}')]]
                    )
                )

                logger.info(f"Sent invoice details to payment manager: id={manager_id}")

            context.bot.send_message(chat_id=update.effective_chat.id, text="""‚åõÔ∏è –û–∂–∏–¥–∞–π—Ç–µ, —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É.  

–í —Ç–µ—á–µ–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏.""")

            logger.info(f"Sent thank you message to user: id={user_id}")
        else:
            logger.warning(f"No invoices found for user: id={user_id}")


def approve_invoice(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    invoice_id = query.data.split('_')[1]

    if len(query.data.split('_')) == 2:
        # This is the first click on the "Approve" button, ask for confirmation
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–î–∞", callback_data=f'approve_{invoice_id}_confirm'),
                                          InlineKeyboardButton("–ù–µ—Ç", callback_data='do_nothing'),
                                          ]])
        context.bot.send_message(chat_id=query.message.chat_id, text=f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ—Ç–∏—Ç—å —Å—á–µ—Ç –Ω–æ–º–µ—Ä {invoice_id} –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω—ã–π?", reply_markup=keyboard)
    else:
        # The manager has confirmed the approval
        database.update_invoice_status(invoice_id, 'PAID')
    
        logger.info(f"Approve Invoice: Invoice ID = {invoice_id}")
        invoice_details = database.get_invoice_details(invoice_id)
        
        logger.info(f"approve_invoice: get_invoice_details returned {invoice_details}")  

        if invoice_details is None:
            print("approve_invoice: invoice_details is None!")  # Add this line
            return
        
        user_id = invoice_details["user_id"]
        amount = invoice_details["amount"]
        name = invoice_details["name"]
        msg = f""" ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ 
        
–í–∞—à —Å—á–µ—Ç –Ω–∞ —Å—É–º–º—É {amount} –æ–ø–ª–∞—á–µ–Ω. 

–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –¥–∏–∞–ª–æ–≥ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –ø—Ä–æ–≥–Ω–æ–∑."""
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üëâ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", url='https://t.me/stavki_tochka1')]])
        context.bot.send_message(chat_id=user_id, text=msg, reply_markup=keyboard)

        # Get the screenshot info from the database
        screenshot_id = database.get_screenshot_id(invoice_id)
        if screenshot_id is not None:
            from_chat_id = invoice_details["user_id"]

            for manager_id in config.PAYMENT_MANAGERS:
                # Forward the screenshot to the payment manager
                context.bot.forward_message(chat_id=manager_id, from_chat_id=from_chat_id, message_id=screenshot_id)

                # Send the message to the payment manager
                context.bot.send_message(chat_id=manager_id, text=f"""üÜï –ù–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Å—É–º–º—É {amount} —Ä—É–±–ª–µ–π.
üí≥: {database.get_current_card_and_bank()} 
     
–°—á–µ—Ç ‚Ññ: {invoice_id}
–ö–ª–∏–µ–Ω—Ç: {name}
User ID: {from_chat_id}
                """)


        query.edit_message_text(text=f"–°—á–µ—Ç {invoice_id} –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.")  # This will update the confirmation message to the approval message



def decline_invoice(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    invoice_id = query.data.split('_')[1]

    if len(query.data.split('_')) == 2:
        # This is the first click on the "Decline" button, ask for confirmation
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("Yes", callback_data=f'decline_{invoice_id}_confirm'),
                                          InlineKeyboardButton("No", callback_data='do_nothing')]])
        context.bot.send_message(chat_id=query.message.chat_id, text=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Å—á–µ—Ç–∞ –Ω–æ–º–µ—Ä {invoice_id}?", reply_markup=keyboard)
    else:
        # The manager has confirmed the decline
        database.update_invoice_status(invoice_id, 'DECLINED')
        invoice_details = database.get_invoice_details(invoice_id)
        user_id = invoice_details["user_id"]
        msg = f"üö´ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É. –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É –∑–∞ –ø–æ–º–æ—â—å—é."
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É", url='https://t.me/stavki_tochka1')]])
        context.bot.send_message(chat_id=user_id, text=msg, reply_markup=keyboard)
        query.edit_message_text(text=f"–°—á–µ—Ç {invoice_id} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.")  # This will update the confirmation message to the decline message




def do_nothing(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)







